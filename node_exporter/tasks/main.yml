---
- name: check init-system
  fail: msg="unsupported init-system {{ node_exporter_service_mgr }}"
  when: "{{ node_exporter_service_mgr not in ['systemd', 'upstart', 'sysvinit'] }}"

- name: check OS family
  fail: msg="unsupported OS {{ ansible_os_family }}"
  when: "{{ ansible_os_family not in ['RedHat', 'Debian'] }}"

- name: define node_exporter_install_version variable
  set_fact:
    node_exporter_install_version: "{{ node_exporter_version }}"

- name: create node_exporter group
  group: name="{{ node_exporter_group }}"  state=present

- name: create node_exporter user
  user:
    name: "{{ node_exporter_user }}"
    group: "{{ node_exporter_group }}"
    createhome: no
    shell: /sbin/nologin
    comment: "node_exporter user"
    state: present

- name: mkdir for config
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ node_exporter_user }}"
    group: "{{ node_exporter_group }}"
    mode: "u=rwx,g=rx,o="
  with_items:
    - "{{ node_exporter_log_path }}"
    - "{{ node_exporter_pid_path }}"
    - "{{ node_exporter_config_folder }}"

- name: ensure {{ node_exporter_install_path }} exists
  file: dest="{{ node_exporter_install_path }}" state=directory

- block:
   - name: get latest release
     uri:
         url: https://api.github.com/repos/prometheus/node_exporter/releases/latest
         return_content: yes
     register: latest

   - name: show latest version
     debug: msg="{{ latest.json.tag_name }}"

   - name: set node_exporter_install_version to latest
     set_fact:
       node_exporter_install_version: "{{ latest.json.tag_name|replace('v', '') }}"
  when: "{{ node_exporter_install_version == 'latest' }}"

- name: download and untar binary
  unarchive:
    src:  "https://github.com/prometheus/node_exporter/releases/download/{{ 'v' if node_exporter_install_version|version_compare('0.13.0', '>=') else '' }}{{ node_exporter_install_version }}/node_exporter-{{ node_exporter_install_version }}.{{ node_exporter_platform_suffix }}.tar.gz"
    dest: "{{ node_exporter_install_path }}"
    copy: no
    list_files: yes
  register: result

- name: add systemd service
  template:
    src: etc/systemd/system/node_exporter.service.j2
    dest: /etc/systemd/system/node_exporter.service
  when: "{{ node_exporter_service_mgr == 'systemd' }}"
  notify: systemd restart node_exporter

- name: add init-script
  template:
    src: etc/init.d/node_exporter.{{ ansible_os_family|lower }}.sh.j2
    dest: /etc/init.d/node_exporter
    mode: "0755"
  when: "{{ node_exporter_service_mgr in ['upstart', 'sysvinit'] }}"
  notify: initd restart node_exporter

- name: create symlink for node_exporter's folder
  file:
    src: "{{ result.files[0] }}"
    dest: "{{ node_exporter_install_path }}/node_exporter"
    state: link
    force: yes
  when: not ansible_check_mode
  notify: "{{ 'systemd' if node_exporter_service_mgr == 'systemd' else 'initd' }} restart node_exporter"

- name: add defaults options
  template:
    src: etc/default/node_exporter.j2
    dest: /etc/default/node_exporter
  notify: "{{ 'systemd' if node_exporter_service_mgr == 'systemd' else 'initd' }} restart node_exporter"

- name: start node_exporter
  service:
    name: node_exporter
    state: started
    enabled: yes

- name: flush handlers
  meta: flush_handlers

- include: tests.yml
